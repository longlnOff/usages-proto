// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: usage/usage.proto

package usage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Usage_SaveUsage_FullMethodName = "/Usage/SaveUsage"
)

// UsageClient is the client API for Usage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsageClient interface {
	SaveUsage(ctx context.Context, in *CreateUsageRequest, opts ...grpc.CallOption) (*CreateUsageResponse, error)
}

type usageClient struct {
	cc grpc.ClientConnInterface
}

func NewUsageClient(cc grpc.ClientConnInterface) UsageClient {
	return &usageClient{cc}
}

func (c *usageClient) SaveUsage(ctx context.Context, in *CreateUsageRequest, opts ...grpc.CallOption) (*CreateUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUsageResponse)
	err := c.cc.Invoke(ctx, Usage_SaveUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsageServer is the server API for Usage service.
// All implementations must embed UnimplementedUsageServer
// for forward compatibility.
type UsageServer interface {
	SaveUsage(context.Context, *CreateUsageRequest) (*CreateUsageResponse, error)
	mustEmbedUnimplementedUsageServer()
}

// UnimplementedUsageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsageServer struct{}

func (UnimplementedUsageServer) SaveUsage(context.Context, *CreateUsageRequest) (*CreateUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUsage not implemented")
}
func (UnimplementedUsageServer) mustEmbedUnimplementedUsageServer() {}
func (UnimplementedUsageServer) testEmbeddedByValue()               {}

// UnsafeUsageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsageServer will
// result in compilation errors.
type UnsafeUsageServer interface {
	mustEmbedUnimplementedUsageServer()
}

func RegisterUsageServer(s grpc.ServiceRegistrar, srv UsageServer) {
	// If the following call pancis, it indicates UnimplementedUsageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Usage_ServiceDesc, srv)
}

func _Usage_SaveUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServer).SaveUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Usage_SaveUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServer).SaveUsage(ctx, req.(*CreateUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Usage_ServiceDesc is the grpc.ServiceDesc for Usage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Usage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Usage",
	HandlerType: (*UsageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUsage",
			Handler:    _Usage_SaveUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usage/usage.proto",
}
